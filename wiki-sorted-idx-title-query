#!/usr/bin/env perl

use strict;
use utf8;
use Encode;
use Digest::MD5;

# for (@ARGV) {
#     print STDERR "arg '$_' " . Digest::MD5::md5_hex($_) . "\n";
# }

chomp(my $mypath = `readlink -f $0`);
chomp(my $mydir = `dirname $mypath`);

open(my $where, "<", "$mydir/where_is_xmlbz2.py") or die "Error openning where-file at $mydir/where_is_xmlbz2.py";
chomp(my $file_info = <$where>);
close $where;
$file_info =~ s/.*?"//;
$file_info =~ s/.xml.bz2"$/.idx/;
my $file_pn = $file_info;
substr($file_pn, -4) = ".pn";

open(my $file, "<", $file_info) 
    or die "Error opening sorted wiki index";

seek($file, 0, 2);
my $max = tell($file);
my $stem = "0x[0-9A-Fa-f]*? " x 9;
our $target = shift @ARGV or die "Error: must supply an argument!";


our $regexp = qr/^$stem\Q$target\E$/m;
our $reg_remap = qr/^($stem)(\Q$target\E)$/m;
our $reg_capture = qr/^$stem(.*)$/;
our $level = 0;
sub bisect($$$){
    my ($file, $min, $max) = @_;
    our $regexp, $target, $reg_capture, $level;
    if ($level++ > 50) {
        die "Error, will cause too many system process and crash!" if @ARGV;
        open(my $grep, "-|", "grep", "-i", "--", $target, $file_pn);
        while(<$grep>) {
            chomp;
            system($mypath, $_, "arg2, make it exit if there're errors");
        }
        die "Error, too many level of recursion";
    }


    if ($min >= $max - 2048) {
        seek($file, $min, 0);
        read($file, my $line, 4096);
        if ($line =~ $regexp) {
            return $&;
        } else {
            return "$target not found";
        }
    }

    my $middle = int(($min + $max) / 2);
    if ($middle > 2048) {
        $middle -= 2048;
    }

    #print STDERR "min is $min, max is $max, middle is $middle\n";
    seek($file, $middle, 0);
    read($file, my $line, 4096);
    if ($line =~ $regexp) {
        return $&;
    }

    my $l1_start = index($line, "\n");
    my $l1_end = index($line, "\n", $l1_start+1);
    my $l1 = substr($line, $l1_start+1, $l1_end - $l1_start);

    die "Error $l1 not match " unless $l1 =~ $reg_capture;
    if ($target lt $1) {
        return bisect($file, $min, $middle + $l1_start);
    } else {
        return bisect($file, $middle + $l1_end, $max);
    }
}

my $res = bisect($file, 0, $max);
die "Error: $res not match pattern" unless $res =~ $regexp;
$res =~ s/$reg_remap/100% [$2\t$1]/;
print "$res\n";
#print STDERR "found $res\n";
